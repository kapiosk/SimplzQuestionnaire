@page "{QuestionnaireCode}/{QuestionId}"
@model SimplzQuestionnaire.Pages.Questionnaires.ActiveModel

@{
    ViewData["Title"] = "Active Question";
}

<h1>Active Question</h1>

<h4>Question @Model.Question.Rank</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        @using (Html.BeginForm())
        {
            @Html.ValidationSummary()
            <input type="hidden" asp-for="Question.QuestionId" />
            <input type="hidden" asp-for="Question.CustomAnswer" />
            <input type="hidden" asp-for="Question.MaxAnswers" />
            <input type="hidden" asp-for="Question.QuestionnaireId" />
            <input type="hidden" asp-for="Question.Timeout" />
            <input type="hidden" asp-for="Question.Rank" />
            <input type="hidden" asp-for="Answer.AnswerId" />
            <input type="hidden" asp-for="Answer.QuestionId" />
            @if (Model.IsAdmin)
            {
            <div class="form-group">
                <label asp-for="QuestionId" class="control-label">Active Question</label>
                <select asp-for="QuestionId" class="form-control" asp-items="Model.Questions"></select>
                <span asp-validation-for="QuestionId" class="text-danger"></span>
                </div>
                <div class="mt-2">
                <input type="submit" value="Change Active" class="btn btn-primary" asp-page-handler="ChangeActive" />
                </div>
                <hr />
                <table id="answersTable" class="table table-striped"><tr><th>User</th><th>Answer</th></tr></table>
            }
            else
            {
                <div class="form-group">
                <label asp-for="Answer.Description" class="control-label">@Model.Question.Description</label>
                <input asp-for="Answer.Description" class="form-control" autocomplete="off" type="@Model.AnswerType" />
                <span asp-validation-for="Answer.Description" class="text-danger"></span>
                </div>
                <div class="mt-2">
                <input id="btnSave" type="submit" value="Save & Continue" class="btn btn-primary" />
                </div>
            }
        }
    </div>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        var maxTime = @Model.Question.Timeout;
        var elapsedTime = 0;
        var path = window.location.pathname.split("/");
        var qId = path.pop();
        function CheckActive()
        {
            elapsedTime += 1;
            if (maxTime > 0 && elapsedTime > maxTime)
            {
                document.getElementById("btnSave").disabled = true;
            }

            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function ()
            {
                if (this.readyState == 4 && this.status == 200) {
                    if (qId != this.responseText) {
                        window.location.href = path.concat(this.responseText).join("/");
                    }
                }
            };
            xhttp.open("GET", "/API/Questionnaire/ActiveQuestion/@Model.Question.QuestionnaireId", true);
            xhttp.send();
            setTimeout(CheckActive, 1000)
        }
        CheckActive();
    </script>
}
@if (Model.IsAdmin)
{
<script>
        var tableAnswers = [];
        var table = document.getElementById("answersTable")
        function RefreshAnswers() {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var answers = JSON.parse(this.responseText);
                    for (var i = 0; i < answers.length; i++) {
                        var answer = answers[i];
                        var row = tableAnswers[answer.UserName];
                        if (row === undefined) {
                            row = document.createElement("tr");
                            var userCell = document.createElement("td");
                            userCell.appendChild(document.createTextNode(answer.UserName));
                            row.appendChild(userCell);
                            var answerCell = document.createElement("td");
                            answerCell.appendChild(document.createTextNode(""));
                            row.appendChild(answerCell);
                            tableAnswers[answer.UserName] = row;
                            table.appendChild(row);
                        }
                        row.cells[1].textContent = answer.Description;
                    }
                }
            };
            xhttp.open("GET", "/API/Questionnaire/ActiveQuestionAnswers/@Model.Question.QuestionId", true);
            xhttp.send();
            setTimeout(RefreshAnswers, 1000)
        }
        RefreshAnswers();
</script>
}